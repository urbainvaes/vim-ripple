*ripple.txt*

Author:  Urbain Vaes <https://urbain.vaes.uk/>
License: MIT

==============================================================================
OVERVIEW                                                               *ripple*

Ripple is a tool to seamlessly send code chunks to an interactive language
shell, or read-eval-print loop (REPL).

    1. Usage ............... |ripple-usage|
    2. Commands ............ |ripple-commands|
    3. Mappings ............ |ripple-mappings|
    3. Configuration ....... |ripple-config|

==============================================================================
USAGE                                                            *ripple-usage*

Ripple aims to provide vim users with the ability to easily send code chunks
to a language shell. This can prove very useful for quickly testing a subset
of a script, or for running a script bit by bit without a debugger.

==============================================================================
COMMANDS                                                      *ripple-commands*

                                                               *ripple-:Ripple*
:[range] Ripple [text]
    If the argument [text] is specified, send it to the REPL. Else, if the
    command is called with a [range], send the corresponding line range in
    the current buffer to the REPL.

    It can be convenient to combine this command with a mapping, e.g. >
        nnoremap yrc :Ripple clear<cr>

==============================================================================
MAPPINGS                                                      *ripple-mappings*

Global~

The <Plug> mappings are always defined, but the mappings to physical keys are
enabled only if |g:ripple_enable_mappings| is set to `1`.

<Plug>(ripple_open_repl), |y<cr>|
    Open a new isolated REPL window (Normal mode mapping).
    Mnemonic: "you enter (the REPL)"

["x]<Plug>(ripple_send_motion), |yr|
    Send text object to the REPL window linked to the current buffer.

    If the current buffer hasn't been assigned a REPL yet, then it will be
    automatically linked to a filetype REPL, i.e. a REPL to which all buffers
    of the same filetype are assigned unless otherwise specified.
    If this filetype REPL does not exist yet, then it will be opened
    automatically by the plugin.

    If instead of using the filetype REPL, you wish to open a REPL
    specifically for the current buffer, run `y<cr>` to open an isolated REPL
    link the current buffer to it.

    When a register, say `x`, is passed to the mapping, the code selection is
    saved under label `x` for future reuse with `"x<Plug>(ripple_send_previous)`.
    The register mechanism is employed only to pass information to the plugin;
    the vim registers themselves are left untouched.

    Mnemonic: "you run".

["x]<Plug>(ripple_send_selection), |R|
    Send text object to the REPL window (Visual mode mapping), and save the
    code selection under label `x`.
    Mnemonic: "run".

["x]<Plug>(ripple_send_previous), |yp|
    Send the latest code selection. More precisely, send the code that is
    currently at the location of the latest code chunk sent to the REPL. If
    the contents of the buffer changed in the meantime, this code might be
    different from the latest code selection.

    If a register `x` is used, `yp` will send the latest code selection saved
    under label `x`. For example, if a code line was previously sent to
    the REPL with `"ayrr`, this line can be run again with `"ayp`.

    A count `<count>` may also be passed to `yp`. The code chunks sent to a
    REPL are stored internally in a stack, with each new code selection added
    at the top, and the mapping `<count>yp` just sends to the REPL the element
    of the stack in position `<count>`, where position indices start at 0. For
    example `1yp` sends to the REPL not the latest code selection, but the one
    just before, i.e. the second code selection on the stack.

["x]<Plug>(ripple_send_line), |yrr|
    Send the current line to the REPL. This is equivalent to >
        ["x]<Plug>(ripple_send_motion)_

<["x]<Plug>(ripple_send_buffer), |yr<cr>|
    Send the whole buffer to the REPL.

==============================================================================
CONFIGURATION                                                   *ripple-config*

Global configuration~

*g:ripple_repls*
    Dictionary for user-defined REPLs. For buffer-local repl definitions, see
    |b:ripple_repl| below.

    Internally, a REPL configuration for a given filetype is a combination of
    five variables:

          - A {command} to start the REPL.

          - A pair of strings {pre} and {post} to prepend and append to
            code sent to the REPL, respectively. This is sometimes necessary
            to enable sending several lines of code to the REPL at once.

          - A boolean {addcr} that controls whether an additional <cr>
            should be appended to the code chunks that are followed by a blank
            line. (This can be useful to avoid the need to press <cr> manually
            in the terminal window. In ipython, for example, two <cr> are
            required to run an indented block.)

          - A parameter {filter} to further filter the code before sending it
            to the REPL. This parameter is a function reference, or just `0`
            if no filter is in use. The vim function |function()| enables to
            obtain the reference to a function.

    In the dictionary |g:ripple_repl|, the keys are |filetype|s and the values
    are either of the following:

        - A string containing the {command} to start the REPL (e.g. 'bash',
          'guile'). In this case the other parameters are assumed to be as
          follows: {pre} = "",  {post} = "", {addcr} = 0 and {filter} = 0.

        - A dictionary specifying the REPL options, with keys corresponding to
          the five parameters described above; that is, 'command', 'pre',
          'post', 'addcr', and 'filter'. The 'command' parameter is required
          and the other parameters are optional. If an optional parameter is
          omitted, the plugin employs a language-specific default value, if
          one is defined in the plugin code, or else the same defaults values
          as in the previous item: {pre} = "", {post} = "", {addcr} = 0 and
          {filter} = 0. At the moment, language-specific defaults are defined
          only for Python and Zsh, as presented below.

    Default values: >
        let s:default_repls = {
            \ "python": {
                \ "exec": "ipython",
                \ "pre": "\<c-u>\<esc>[200~",
                \ "post": "\<esc>[201~",
                \ "addcr": 1,
                \ "filter": 0,
                \ },
            \ "julia": "julia",
            \ "lua": "lua",
            \ "r": "R",
            \ "ruby": "irb",
            \ "scheme": "guile",
            \ "sh": "bash",
            \ "zsh": {
                \ "exec": "zsh",
                \ "filter": function('s:remove_comments'),
                \ }
            \ }

*g:ripple_winpos*
    Modifier for the window position. In nvim, this modifier is prepended to
    the |new| command when opening the terminal window. In vim, it is
    prepended to the |term| command.
    Default: 'vertical'.

*g:ripple_enable_mappings*
    Set this to 0 to disable all mappings apart from the <plug> mappings.
    Default: 1.

*g:ripple_highlight*
    Highlight group employed to highlight text objects sent to the REPL.
    Default: '|DiffAdd|'.

*g:ripple_term_name*
    Name of the REPL buffer.

*g:ripple_term_options* (vim only)
    Dictionary with additional options to pass to `term_start()`.

*g:ripple_always_return*
    If this parameter is 1, then a newline character is always appended to
    motions sent to a REPL. If this parameter is 0, then a newline character
    is sent only if the motion is |linewise|, and not if the motion is |charwise|.
    Default: 0.

Buffer-local configuration~

*b:ripple_repl*
    REPL configuration for current buffer. This takes precedence over
    the global option `g:ripple_repls[&filetype]`. REPLs which are created
    from buffers where this variable is defined are isolated: they can receive
    input only from the parent buffer.

*b:ripple_term_name*
    Name of the REPL buffer. This takes precedence over
    the global option `g:ripple_term_name`.

==============================================================================
CHANGELOG                                                    *ripple-changelog*

Jul 2021
    Add the |g:ripple_always_return| option.

Jul 2021~
    Improve the data structures for specifying the REPLS. Configuration for
    the REPLS can now be achieved through dictionaries, which are more
    descriptive and flexible than lists. In particular, only a subset of the
    options can be specified, in which case the other options take default
    values.

Dec 2020~
    Previous selections associated with a given buffer are now stored in a
    stack, and they can be run by passing a count to `yp`. For example, `1yp`
    will send to the REPL the second element of the stack, and `2yp` will run
    the third. Without a count, `yp` behaves as it used to: it sends to the
    REPL the code chunk at the top of the stack, i.e. the one in position 0.

Nov 2020~
    REPLs are now either isolated or not isolated. Isolated REPLs receive
    input from only one buffer, whereas non-isolated REPLs can reveive input
    from several buffers that have the same filetype.

    The mapping `y<cr>` will now start an isolated REPL. To start or attach to
    a REPL common to all buffers of the filetype, simply run a command of the
    type `yr<motion>`.

Oct 2020~
    Enable saving several selections for later use with `"<number>yp`.
    For example, a line initially run with `"3yrr` can be run again with
    `"3yp`. The register mechanism is used only to pass information; the vim
    registers themselves are left untouched by the plugin.

==============================================================================

vim:tw=78:ts=4:et:ft=help:norl:
